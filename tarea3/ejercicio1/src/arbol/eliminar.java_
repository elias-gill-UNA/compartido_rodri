// eliminar elemento del arbol
    public void eliminar(T dato) {
        raiz = eliminar_privado(raiz, dato);
    }

    // eliminar elemento del arbol
// eliminar elemento del arbol
    private NodoBST<T> eliminar_privado(NodoBST<T> actual, T dato) {
        if (actual.dato.compareTo(dato) == 0) { // el dato corresponde
            // ningun hijo
            if (actual.izq == null && actual.der == null) {
                return null;

                // un hijo
            } else if (actual.izq != null && actual.der == null) { // por izquierda
                return actual.izq;
            } else if (actual.der != null && actual.izq == null) { // por derecha
                return actual.der;

                // dos hijos
            } else {
                NodoBST<T> temp = actual.der.buscarSucesor();

                // reamplazar el dato con el sucesor
                temp.izq = actual.izq;
                temp.der = actual.der;

                return temp;
            }

        } else {
            int comp = actual.dato.compareTo(dato);
            if (comp < 0) {
                actual.izq = eliminar_privado(actual.izq, dato);
            } else {
                actual.der = eliminar_privado(actual.der, dato);
            }
        }
        return actual;
    }


// ALTURA DEL NODO
    public int altura_nodo(int i, NodoBST<T> nodo) {
        if (nodo == null) {
            return i;
        }
        int de = altura_nodo(i + 1, nodo.der);
        int iz = altura_nodo(i + 1, nodo.izq);

        if (iz > de) {
            return iz;
        }
        return de;
    }




