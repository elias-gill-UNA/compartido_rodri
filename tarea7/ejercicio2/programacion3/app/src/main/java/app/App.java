/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import java.io.File;
import java.util.Scanner;

import org.jgrapht.Graph;
import org.jgrapht.alg.cycle.CycleDetector;
import org.jgrapht.graph.DefaultEdge;
import org.jgrapht.graph.SimpleDirectedGraph;

// Una clase para representar un objeto grafo
class grafo {
    // Una lista de listas para representar una lista de adyacencia
    Graph<Integer, DefaultEdge> g = new SimpleDirectedGraph<>(DefaultEdge.class);
    int vertices;
    int inicial;

    grafo(int vertices, int aristas[][], int inicio) {
        this.vertices = vertices;
        this.inicial = inicio;

        for (int i = 0; i < vertices; i++) {
            g.addVertex(i);
        }

        // El grafo simple dirigido no permite Auto-bucles(ciclos) por tanto lanza una
        // exepciÃ³n
        // Se agregan las aristas
        for (int i = 0; i < aristas.length; i++) {
            g.addEdge(aristas[i][0], aristas[i][1]);
        }
    }

    public void trancados() {
        // verifica si existe ciclos
        CycleDetector aux = new CycleDetector(g);
        if (aux.detectCycles()) {
            throw new RuntimeException("No se permiten ciclos");
        }

        if (g.outgoingEdgesOf(inicial).isEmpty()) {
            System.out.println("El nodo de inicio se encuentra aislado");
            return;
        }

        for (Integer i : g.vertexSet()) {
            if (i != inicial && g.outgoingEdgesOf(i).isEmpty()) {
                System.out.println(i);
            }
        }
    }
}

public class App {
    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File("/home/elias/entrada.txt"));
            int islas = sc.nextInt();
            int puentes = sc.nextInt();
            int inicial = sc.nextInt();

            int[][] edges = new int[islas][2];
            for (int i = 0; i < puentes - 1; i++) {
                int in = sc.nextInt();
                int out = sc.nextInt();
                edges[i] = new int[] { in, out };
            }

            grafo g = new grafo(islas, edges, inicial);
            g.trancados();
            sc.close();

        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
